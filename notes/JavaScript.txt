Date: 4.8.2020
-----------------------------------------------------
+"Do not Imitate, UNDERSTAND"+
-----------------------------------------------------
Big WORD Alert:
----------------- Execution Context and Lexical Environments ----------------------------
1. Syntax Parsers - used for reading and understanding the code that is written, so that machine can understand it (parsing means dividing a large
entity into smaller entities for better understanding)
2. Lexical Environment - the rules of how code should be written and position of elements of code ( Example: after function there is a space 
then a name)
+ 3. Execution Context - a wrapper to help manage the code that is running
+ 4. Name/Value Pair - a name which maps to a unique value
+ 5. object - a collection of name/value pairs (This is the simplest explanation of objects in JavaScript)
+ 6. Hoisting - unique JavaScript behaviour 
7. "undefined" - value of variables that is later replaced by the real values of variables, never set the value of variable to undefined let the JavaScript 
Engine do it for you
8. Single Threaded - single command is executed at a time, JavaScript is a Single Threaded programming language, but it does not mean that browsers
are executing all other commands in a single thread manner. In JavaScript only one thing is happening at a time.
+ 9. Function Invocation and Execution Stack- running a function ( calling a function ), execution stack is collection of stacks that represent the contexts
that are being executed.
+ 10. Variable Environment - is the environment that is created for variables in a specific execution context
+ 11. Scope Chain - the relationship between functions, their lexical environments, relationship established as parent - child relationship
+ 12. Asynchronous - more than one at a time 
+ 13. "let" - variable type
----------------- END OF SECTION 2 ----------------------------
----------------- Types and Operators ----------------------------
14. Dynamic Typing - In JavaScript user does not specify what type a certain variable is ( this is common in other programming languages ) where you 
specify that variable is of type integer then the programming language engine is expecting a specific value to be inserted in that variable. In JavaScript
type is not specified, the type of variables are "var" which basically means "variable", and when engine goes through different phases of creation and
execution it will understand and set a certain type to a variable
+ 15. Primitive Types in JavaScript
16. Operators 
17. Operator Precedence - "Pravo prvenstva" at operators, which operator will be executed first, is it * or + ...
18. Operator Associativity - happens when we have multiple operators with the same precedence, will they execute from left to right or opposite
+ 19. Coercion - converting a value from one type to another
+ 20. Comparison Operators 
21. Existence and Booleans - boolean values are able to tell if a certain variable has a value inside of it, every variable with a value that is not: 0,
undefined, null, " "... is equal to true.
++POGLEDATI OPET 28. i 29. VIDEO++
----------------- END OF SECTION 3 ----------------------------
----------------- Objects and Functions ----------------------------
+ 22. Object
+ 23. Object Literals
+ 24. Framework Aside: Faking Namespaces
+ 25. JSON - JavaScript Object Notation
+ 26. First Class Functions 
+ 27. Function Expressions and Function Statements
+ 28. By Value vs By Reference
+ 29. to Mutate
+ 30. Objects, Functions and "this"
+ 31. Arrays
+ 32. Arguments and Parameters
--------------------------------------------------------------------------------
4. Name/Value Pair Example:
- Example would be a basic variable
- name = "Orhan"

+++++++++++++++++++++

5. object Example:
- As it is defined, in the simplest form possible in JavaScript - object is a collection of name/value pairs
- Example:
Address = {
	street:"Gigim Street",
	number: 9
	apartment:{
		floor:2,
		position :"Middle",
		number:301
	}
}

++++++++++++++++++++++

3. Execution Context:
-Great article on execution context - http://davidshariff.com/blog/what-is-the-execution-context-in-javascript/

Global Execution Context:
- "Global" -> in JavaScript means: "Not inside a function".
- Is the base execution context in any JavaScript Code that is always created by the JavaScript Engine, it does not matter if there is no code in the
.js file the global execution context will always be created.
- Global Execution Context has 2 main things that are created with it and that is Global Objects and "this" (which is a global variable).
- When something is "global" it means that is always and everywhere accessible in your code.
- Global Object created in any kind of browser when running the JavaScript code is called "window" and it is equal to "this" variable, which means 
that "window" and "this" have equal values and they are the same in the Global Environment of browsers.
- It is important to note that every tab is a new "window" that creates its own Global Environment.

-If variables and functions are created on a global level they will be attached to the global object - "window" or "this" (because they are the same)


+++++++++++++++++++++++
2 Phases that the code goes through: 

Creation Phase: Elements of the Execution Context - https://prnt.sc/tx52pe
Execution Phase: Elements of the Execution Context - https://prnt.sc/tx5b3u

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

6.  Hoisting
- Every JavaScript file when it is run is divided into phases.
- First phase is the "Creation" phase where the "hoisting" behaviour happens.
- In the Creation phase syntax parser goes through the code line by line and creates all the variable and functions in the memory, allocating memory
space for them.
- Every variable created in this phase will have an "undefined" value assigned to them while every function will store its own values in the memory
- In other phases the values of variables are added to the memory
- An example of this can be seen here: https://prnt.sc/tv2zhk

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

9. To Invoke a Function and Execution Stack
- Invocation of a function is running the contents of a function.
- It is basically creating an Execution Context that the JavaScript engine will enter and execute a code inside of it.

- Invoking a function is easy, at the first hierarchical level outside of the function just call the name of the function with "()"
-Example:

function example(){
	console.log("It is working");
} 

example();

- "example();" is the Invocation of a function.

-At the initial phase of running a code, Creation Phase will begin on the Global Level, which means that only global variable and function will be allocated
and run.
-To access other functions and execute them we need to Invoke them on the global level, and move further down the path.
- This process of invoking and adding the functions to the execution is called "Execution Stack", every function added to the Execution Stack is added
at the top and it is immediately executed line by line after the top function is finished and it did not invoke to a new function it will "pop off" the
execution stack and move to the function below it.

- Image of the Execution Stack and Invoking Functions - https://prnt.sc/tz02t6
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

10. 

- Every execution context ( it does not matter if it is global or functional execution context ) can be looked at as the independent environment that is
created
- What this means is that every context has its own Variable Environment.
- Every variable environment of specific execution context is independent of one another, which means that variable with same names can be created 
in different variable environments and they wont influence one another.

-The Example of multiple Variable Environments with same variable names can be found here: https://prnt.sc/u012rx
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

11. Scope Chain

- Scope determines the accessibility (visibility) of variables.
- Scope Chain represents the relationship between the variables from the perspective of a scope.

- Example: https://prnt.sc/u01jpz
- In the example; function b() is trying to console.log the value of "myVar" variable but it did not declare the value of this variable, what will happen
is determined by the scope chain.
- Function b() because it does not know what is the value of variable will try to find it outside of its execution context ( in the outer environment ) and
scope chain will tell it that outside of this function is global execution context and will look for the value of "myVar" there, if function b() was inside 
the function a() it would then look at the value of "myVar" variable there, if a() also does not know the value of "myVar" it will go outside of a(), this
will proceed until the value of "myVar" is found through the Scope Chain or until the end is reached and the value is not declared.

-Example of a code when function b() is one level below the global level - https://prnt.sc/u01lfm (meaning that it will look for answer in global context)
- Example of a code when function b() is inside function a() - https://prnt.sc/u01mae

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
12. Asynchronous

- We have already established that JavaScript is a synchronous / single threaded programming language.
- Meaning that it is able to execute lines of code or statements one by one.
- But in a way that JavaScript Engine behaves in a browser when it is executed it creates an imagination that it is a Asynchronous language.

- When JavaScript is executed the first thing that happens is that the whole JavaScript Code is being executed, everything that is part of the Execution
Stack will be executed until the Execution Stack is empty.
- But, while the execution stack is being executed something called the Event Queue is being filled with different events that are happening on the
page, such as "Click" event (Someone pressing something on the page).
- Only when the whole Execution Stack is empty only then will the functions assigned to handle these events will be loaded into the stack to resolve 
events.
- Furthermore, resolving events is also a Synchronous process only a single event handler function will be loaded on the execution stack and only when
it "pops out" of the stack the other function is loaded that will be used to handle second event on event queue.

Examples : https://prnt.sc/u0gthg and https://prnt.sc/u0gtt3 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

13. "let" variable type
Great Information about "let" - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let

- "let" is a type of variable that is used in specific scenarios
- It is initialised in the same way as the "var"
- Example: let variable1 = 1;

- "let" variables are unique in a way that they are used 
-  "var" variables scope is defined in the function itself while the "let" variables change and they are unique for any block statement ({} statements, like
for loop, if statements and etc.)

Example: https://prnt.sc/u0gq3q and https://prnt.sc/u0gui9

----------------- END OF SECTION 2 ----------------------------
Primitive Types in JavaScript

-Primitive type is just the type of variable that is commonly set in other programming languages manually while in JavaScript primitive types are set
dynamically.
- There are 6 Primitive Types in JavaScript:
1. "Undefined" - is a value set to variables that represent lack of existence, meaning the variable has no value set to it
2. "Null" - similar to the "Undefined" value of variable, it represents that value is not set, but the difference is that "Null" should be set by the programmer
if he wants to and "Undefined" shouldn't 
3. "Boolean" - has only two values, true or false
4. "Number" - holds all values of number types, it is a floating number which means that it always has some decimals attached to it
5. "String" - a sequence of characters, words basically
6. "Symbol" - new type introduced in ES6 (Version of JavaScript)

++++++++++++++++++++++++++++++++++++++++++++
19. Coercion - converting a value from one type to another

- Because JavaScript is a dynamically allocated programming language, meaning that it has dynamic typing, coercion is one of the methods that it uses
when things become a bit messy.
- Operators are able to work with strings and numbers, but what happens when we use strings and numbers in the same equation. 
- Example of operators working with strings and numbers separately - https://prnt.sc/u2uzay

- Coercion happens when we use multiple different primitive types with a single operator.
- For an example adding 1 and 2 where 2 is a string, will result in something unexpected.
- The result can be seen here - https://prnt.sc/u2v2am
- The result of this operation is 12 because JavaScript Engine knows that 1 and 2 are of two different types and it is coercing 1 into string so they are
compatible with each other. 
- How will JavaScript coerce in different situations and what will switch into what type is something that is defined deep into the JavaScript Engine.
- Just be aware that it happens.
- When an unexpected result happens, following the path of execution (Execution Stack), scope of variable (Scope Chain) and understanding the 
coercion will help us decode what happened.

+++++++++++++++++++++++++++++++++++++++++++++
20. Comparison Operators 

- This is a very long and detailed topic
- It talks about comparisons in the JavaScript and how values are converted and compared so that comparing 1 and true will return that they are equal
- Also in JavaScript there exist "===" that is used in block statements that looks for the absolute equal, which means that it will not convert any values
that values have to be equal to one another no matter what, without any conversion. 
- Example: https://prnt.sc/u3hwvs
- Documentation MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness

----------------- END OF SECTION 3 ----------------------------
22. Object

- as it is mentioned before object in the most primitive example is a collection of name/value pairs ( or variables )
- the content of an object can be divided into two categories, into "primitives" and "Methods"
- "Primitives" are content of an object that are of primitive type ( such as boolean, number, string...)
- "Primitive" contents can be basic variables or objects inside of objects.
- While "Methods", on the other hand, are functions of objects. 
- Firstly created object whose content are other objects and variables, is most likely referenced as parent object, has its own memory space and number
associated with it.
- Every variable and object inside a parent object has its own memory space to which parent object is able to access by saving and knowing the number
that every memory space and variable / object has.

- Creation of Object and its properties can be seen here: https://prnt.sc/uc6956

- This is a very important topic and the importance of the "dot" operator is fully explained in the video, if anything is left unclear watch the video again

+++++++++++++++++++++++++++++++++++++++++++++
23. Object Literals

- Great Information on the topic of Object Literals - https://www.dyn-web.com/tutorials/object-literal/
- A JavaScript object literal is a comma-separated list of name-value pairs wrapped in curly braces. Object literals encapsulate data, enclosing it in a tidy 
package. 
- This minimizes the use of global variables which can cause problems when combining code.

- Object Literal is a better way of creating object and initializing its content.
- Example of creating an object with object literals can be seen here - https://prnt.sc/ucybrq

+++++++++++++++++++++++++++++++++++++++++++++
24. Framework Aside: Faking Namespaces

- By learning the variable environments and how they behave with one another, I understood that variables of same names can not be created in the
same execution context.
- If they are then they would just change the values of the one and only created variable.
- Now the question remains what will happen if we have more then one JS file that is connected to the same HTML for an example and where JS files
have the same name of some variables?

- The solution can be found in objects, every unique object can have any value of namespaces of variables.
- For an example, two variables of name "example" can not be in the same execution context but if they are in two different objects then they can

+++++++++++++++++++++++++++++++++++++++++++++
25. JSON

- Great source of information on JSON - https://www.json.org/json-en.html

- JSON maybe looks similar to Object Literal but they are not the same thing.
- JSON is mostly used for communicating with a server, for an example sending data information to a server from your website.
- In this JSON format data is easily readable and very lightweight especially for syntax parser and fast execution.
- "JSON an ideal data-interchange language"

- In JSON the name in name/value pair has to have a double quotation marks on it (" ") 

JavaScript provides methods:

- JSON.stringify to convert objects into JSON.
- JSON.parse to convert JSON back into an object.

+++++++++++++++++++++++++++++++++++++++++++++
26. First Class Functions

- JavaScript has a very unique functions.
- They behave and are regarded as objects.
- Object has its properties it is what makes him an object, and a property of an object can be many different things.
- The same behaviour a function has, first two properties that are created with a function are function name and the code of a function.
- WIth the "dot" operator (.), same as with a normal object, we are able to add properties to a function.
- For an example - myFunction.variable = "Ovo je neka vrijednost", can be done and it will generate a property on a function that will have the 
added value.
- Properties of functions can be variables, objects and other functions.

- Properties of a function - https://prnt.sc/udjyqe

+++++++++++++++++++++++++++++++++++++++++++++
27. Function Expression and Function Statements

- Expression is a unit of code that results in a value, this value does not have to be saved in a variable.
- Statements are lines of code that in execution phase can become expressions, basically any kind of code that is written.
- Statements do the work. 

- Now statements can have a form of a function, continuing the definition of a statement we just add on it the definition of a function.
- Meaning that a function created in the general way, as it can be seen in the example below, we get a function statement.
- The content of function statements can result in function expression but the line of code that is the head of function is not an expression, because
it does not result in creation of a value.
- Example of a function statement - https://prnt.sc/uevhtm

- Same as with statements, the expressions can have the form of a function.
- Function Expression is a function that becomes a value of, for an example, a variable.
- Because we understand that functions behave the same way as objects in JavaScript this means that they have the same behaviour of storing
themselves inside of the variables.
- Same as with an object and variable, the variable in which we stored a function basically becomes and behaves as a function itself, meaning
we are able to use operators same way as we are interacting with a function.
- Example of a function expression - https://prnt.sc/uevspd

+++++++++++++++++++++++++++++++++++++++++++++
28. By Value vs By Reference

- We created an primitive value "a", meaning a variable named "a" with a primitive value inside of it.
- Variable "a" will be placed in memory and it will have its specific memory code or a memory place that is noted with a specific numbers and letters

- Now we wanted to create the same exact variable but with a different name.
- For an example variable "b", and we do that by using the equal operator - a = b;
- In this case a new space in memory will be allocated and the values will be same but both variables will have different memory codes.
- For an example "a" will have "0x001" while "b" will have "0x002"
- And this is called "By Value"
- In the Example, it can be seen how the "by Value" use of creating equal variables the variables will not affect one another if one changes the 
value, that makes sense because the second variable "b" has its own memory space and it is created independent from variable "a" only the first 
value is the same.
- The Example - https://prnt.sc/ugmmgf

- While in "By Reference"
- We are talking about a more evolved storages of value, such as objects.
- When we create and object it will constantly follow its properties with a memory address to always know where is everything and what is the 
value, that is why the "." operator works.
- If we create a new object that will be equal to the value of the previous object, basically creating the same object but with a different name.
- The JavaScript will in this case make them equal and they will, "a" and "b" object, will both point with a same memory space code (that is the
same reference to the memory space).
- The thing with the "By Reference" is that once we change one of the properties of one of the objects that we made equal to then all objects change
because they are basically showing to the same value in the memory, as it is explained previously.
- Example - https://prnt.sc/ugn3tq

+++++++++++++++++++++++++++++++++++++++++++++
29. To Mutate

- To Mutate an object or a variable it just means to change the value of it, or to change it.
- There also exists the term "immutable", which means that it can not be changed in any way.

+++++++++++++++++++++++++++++++++++++++++++++
30. Objects, Functions and "this"

- Every time an Execution Context is created three things are created with it.
- The Variable Environment, Link to the Outer Environment ( the Scope Chain ) and the object "this".
- "this" global object is a bit tricky when it is used, depending of a scenario in which the "this" object is created
it can point to different things

- Different Scenarios Can Happen:
1. Being in a "Global Execution Context" or being in any "Execution Context" (inside of a function or in a function
expression).
2. Being inside of an object.
2+. This can be defined as the third scenario but it is directly connected to the objects.




1. In this scenario keyword "this" points to a global variable that has two names "window" or "this", adding properties
to this object will be equal to creating variables and functions in the global execution context.
- Example of this Scenario and the results: https://prnt.sc/unuc9e

2. As we defined before, everything can be inside of an object. Functions inside of objects are called methods. 
Using "this" keyword in methods it points to the object itself. 
- Example: https://prnt.sc/unumjh

2+. If we have a method inside of an object that has "this" keyword used we understood from the 2nd scenario that
in that case "this" keyword will point to the object itself. BUT if we create a method inside of a method then
use "this" keyword in that case it will point to the global window ( this ) object that happens in the 1st scenario
- Example: https://prnt.sc/uouuvm

- Scenario "2+" is something that is very strange and something that does not make sense in the world of programming.
The logic does not follow, especially if we know about scenario "2". Because in the scenario "2" the "this" object
points to the object in which it is located then we can use that to our own advantage and fix the strange state
of "this" in nested methods of objects.
- Example: https://prnt.sc/uov0vd - the use of "objThis" variable

+++++++++++++++++++++++++++++++++++++++++++++
31. Arrays

- Arrays are basically a collection of things.
- We declare an array same as we do an object, we use "array literal" that has the same concept as "object literal"
but the brackets that are used for arrays are "[]", value is put inside of them and it is divided with ","
- Because JavaScript is a dynamically typed language it gives an ability to the array that can hold elements of 
different type inside of the same array, which is very different from other programming languages.
- Array can hold a number, a string, an object, a function and a boolean at the same time without any problems.

- Example of function invocation through the arrays and using objects properties through arrays is very nicely
explained on the video.
- Also mine example of such problems: https://prnt.sc/uovhy4

+++++++++++++++++++++++++++++++++++++++++++++
32. Arguments and Parameters 

- Argument is the value that is passed to the functions parameters, they are basically the same thing but viewed 
from different angles.
- Argument is inserted in the "()" of the function invocation, while the parameter name is set in the "()" while
creating the function.

- Passing arguments to a function is very simple, basically the values that we pass through arguments to parameters
will be filled from left to right, meaning if the first value is "21" and the first parameter is "name" then name will
be equal to 21 in the function.
- If we do not pass any value to a specific parameter in most programming languages that would result in an error
but in JavaScritp because of hoisting this will result in these parameters to have "undefined" values and no error
- Example: https://prnt.sc/up9tlh

- Furthermore, in JavaScript we are able to set the default values to the parameters that will be their value if
they are undefined at the end of creation. This is done just by setting the value of parameter in the brackets -
function primjer ( parameter = "Default" )
- Example: https://prnt.sc/up9vdv

- Inside of a function there exists an array-like list that holds the collection of all arguments passed to a
function.
- It does not hold the default values that we set in the parameter brackets.
- This array-like list is called "arguments" and it behaves as an array.
- Example: https://prnt.sc/upa5fy
- Example with if statement: https://prnt.sc/upa8zk



